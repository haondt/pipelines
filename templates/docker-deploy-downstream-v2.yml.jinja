{% for project in helpers.get_projects(xtra) %}
{% set project_config = helpers.get_project_config(xtra, project) %}

docker-build-deployment-{{ project }}:
  stage: deploy
  image: {{ images.docker_deployer_v2 }}
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: docker-check-changes
  script:
    - python3 /scripts/build.py $GITLAB_DOCKER_BUILD_ENCRYPTION_KEY {{ project }}
  artifacts:
    paths:
      - {{ project }}.enc

docker-deploy-{{ project }}:
  stage: deploy
  image: {{ images.docker_deployer_v2 }}
  {% if environment in task %}
  environment:
    name: {{ project_config.environment }}
  {% endif %}
  {% if helpers.should_use_manual_deploy(task, env) %}
  when: manual
  {% endif %}
  variables:
    {% if 'name' in project_config %}
    DEPLOYMENT_NAME: {{ project_config.name }}
    {% else %}
    DEPLOYMENT_NAME: {{ project }}
    {% endif %}
  needs:
    - docker-build-deployment-{{ project }}
    - pipeline: $PARENT_PIPELINE_ID
      job: docker-check-changes
  script:
    - cat changed_services.yml | python3 /scripts/get_containers.py {{ project }} > {{ project }}_changed_containers.txt
    - up_command="cd /srv/deploy/$DEPLOYMENT_NAME && docker compose up -d --force-recreate --build --remove-orphans $(tr '\n' ' ' < {{ project }}_changed_containers.txt)"
    - python3 /scripts/untar.py $GITLAB_DOCKER_BUILD_ENCRYPTION_KEY {{ project }} ./{{ project }}-deploy
    - chmod 400 {{ project_config.key }}
    - rsync -az --delete --rsh=ssh -e "ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -i {{ project_config.key }}" ./{{ project }}-deploy/ {{ project_config.target }}:/srv/deploy/$DEPLOYMENT_NAME/
    - ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -i {{ project_config.key }} {{ project_config.target }} "$up_command"

{% endfor %}
