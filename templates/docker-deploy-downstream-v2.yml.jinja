{% set scripts_dir = 'pipelines/scripts' %}

{% for project, project_map in helpers.get_projects(xtra).items() %}
{% set project_config = helpers.get_project_config(xtra, project) %}

{% if project_map.type == 'docker' %}

docker-build-deployment-{{ project }}:
  stage: deploy
  image: {{ images.docker_deployer_v2 }}
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: docker-check-changes
    - pipeline: $ROOT_PIPELINE_ID
      job: generate
  script:
    - make -f {{ scripts_dir }}/docker-deployer/makefile build PROJECT={{ project }} CHANGES=changed_services.yml
  artifacts:
    paths:
      - {{ project }}.enc
    expire_in: {{ env['DEFAULT_ARTIFACT_EXPIRY'] }}

docker-deploy-{{ project }}:
  stage: deploy
  image: {{ images.docker_deployer_v2 }}
  {% if environment in task %}
  environment:
    name: {{ task.environment }}
  {% endif %}
  {% if helpers.should_use_manual_deploy(task, env) %}
  when: manual
  {% endif %}
  variables:
    {% if 'name' in project_config %}
    DEPLOYMENT_NAME: {{ project_config.name }}
    {% else %}
    DEPLOYMENT_NAME: {{ project }}
    {% endif %}
  needs:
    - docker-build-deployment-{{ project }}
    - pipeline: $PARENT_PIPELINE_ID
      job: docker-check-changes
    - pipeline: $ROOT_PIPELINE_ID
      job: generate
  script:
    - make -f {{ scripts_dir }}/docker-deployer/makefile changed-containers CHANGES=changed_services.yml PROJECT={{ project }} > {{ project }}_changed_containers.txt
    {% if 'podman' in task and task.podman == True %}
    - up_command="cd /srv/deploy/$DEPLOYMENT_NAME && podman-compose up -d --force-recreate --build --remove-orphans $(tr '\n' ' ' < {{ project }}_changed_containers.txt)"
    {% else %}
    - up_command="cd /srv/deploy/$DEPLOYMENT_NAME && docker compose --compatibility up -d --force-recreate --build --remove-orphans $(tr '\n' ' ' < {{ project }}_changed_containers.txt)"
    {% endif %}
    - make -f {{ scripts_dir }}/docker-deployer/makefile untar PROJECT={{ project }}
    - chmod 400 {{ project_config.key }}
    - rsync -az --delete --mkpath --rsh=ssh -e "ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -i {{ project_config.key }}" ./{{ project }}-deploy/ {{ project_config.target }}:/srv/deploy/$DEPLOYMENT_NAME/
    - ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -i {{ project_config.key }} {{ project_config.target }} "$up_command"

{% elif  project_map.type == 'kubernetes' %}

{% for app in project_map.services %}


docker-build-deployment-{{ project }}-{{ app }}:
  stage: deploy
  image: {{ images.docker_deployer_v2 }}
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: docker-check-changes
    - pipeline: $ROOT_PIPELINE_ID
      job: generate
  script:
    - make -f {{ scripts_dir }}/docker-deployer/makefile build-kubernetes PROJECT={{ project }} APP={{ app }}
  artifacts:
    paths:
      - {{ project }}-{{ app }}.enc
    expire_in: {{ env['DEFAULT_ARTIFACT_EXPIRY'] }}


docker-deploy-{{ project }}-{{ app }}:
  stage: deploy
  image: {{ images.docker_deployer_v2 }}
  {% if environment in task %}
  environment:
    name: {{ task.environment }}
  {% endif %}
  {% if helpers.should_use_manual_deploy(task, env) %}
  when: manual
  {% endif %}
  needs:
    - docker-build-deployment-{{ project }}-{{ app }}
    - pipeline: $PARENT_PIPELINE_ID
      job: docker-check-changes
    - pipeline: $ROOT_PIPELINE_ID
      job: generate
  script:
    - make -f {{ scripts_dir }}/docker-deployer/makefile untar PROJECT={{ project }} APP={{ app }}
    - kubectl config use-context {{ project_config.context }} --kubeconfig {{ project_config.kubeconfig }}
    - kapp deploy -a {{ project_config.name | default(project) }}-{{ app }} -f {{ project }}-{{ app }}-deploy/{{ project }}-{{ app }}.yml --kubeconfig {{ project_config.kubeconfig }} --yes

{% endfor %}

{% for app in project_map.removed_services %}

docker-remove-{{ project }}-{{ app }}:
  stage: deploy
  image: {{ images.docker_deployer_v2 }}
  {% if environment in task %}
  environment:
    name: {{ task.environment }}
  {% endif %}
  {% if helpers.should_use_manual_deploy(task, env) %}
  when: manual
  {% endif %}
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: docker-check-changes
    - pipeline: $ROOT_PIPELINE_ID
      job: generate
  script:
    - kubectl config use-context {{ project_config.context }} --kubeconfig {{ project_config.kubeconfig }}
    - kapp delete -a {{ project_config.name | default(project) }}-{{ app }} --kubeconfig {{ project_config.kubeconfig }} --yes

{% endfor %}

{% else %}

{{ raise_value_error('Invalid project type: ' ~ project_map.type) }}

{% endif %}
{% endfor %}


